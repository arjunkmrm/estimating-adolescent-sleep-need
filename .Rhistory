data.nonap$plapses = predict(TST.nonap.lapses, data.nonap)
data.nonap$plapses[is.nan(data.nonap$plapses)] <- 0.0
#graphing lapses vs excess
crit.lapses <- TST.nonap.lapses$coefficients$random$subj + TST.nonap.lapses$coefficients$fixed[3]
crit.lapses <- data.frame(crit.lapses)
crit.names <- data.frame(subj = rownames(crit.lapses))
crit.lapses$subj <- crit.names$subj
subj.irreg <- data.nonap %>% group_by(subj) %>% count() %>% filter(n < 6) %>% select(subj)
data.nonap <- data.nonap %>% filter(!subj %in% c("NFS2073", "NFS4042", "NFS5063"))
crit.lapses <- crit.lapses %>% filter(!subj %in% c("NFS2073", "NFS4042", "NFS5063"))
subj.nonap <-  data.nonap %>% group_by(subj) %>% count() %>% select(subj)
crit.lapses <- crit.lapses %>% filter(subj %in% subj.nonap$subj)
subj.crit <-  crit.lapses %>% group_by(subj) %>% count() %>% select(subj)
data.nonap <- data.nonap %>% filter(subj %in% subj.crit$subj)
#
nrow(data.nonap)/6
nrow(crit.lapses)
crit.lapses = rep(crit.lapses$crit, each = 6)
data.nonap = cbind(data.nonap, critical.lapses = crit.lapses)
data.nonap = data.nonap %>% mutate(excess.lapses = TWT_tst - critical.lapses*day_num)
data.nonap
knitr::opts_chunk$set(knitr::opts_chunk$set(warning = FALSE, message = FALSE), echo = TRUE)
library(tidyverse)
library(rmarkdown)
#load data
data.nfs = read.csv("nfs.csv")
print(head(data.nfs[, 1:8])) #display dataset
#select only the required groups
data.nfs = data.nfs %>% select(subj, day_num, group, lapses = pvt_lapses)
data.nfs = data.nfs %>% na.omit() #remove NAs
print(head(data.nfs)) #view dataset
#summarize to get mean pvt lapses
data.nfs = data.nfs %>% group_by(subj, group, day_num) %>%
summarise(lapses = mean(lapses))
print(head(data.nfs))
nfs.tst <- data.frame() #create an empty dataframe to initialize
#run a loop to read TST data
for(i in c(1, 2, 4, 5)){
study <- paste("NFS", i, sep = "")
if(i %in% c(1, 2)){
nfs.tst.temp <- read.csv(paste(study, ".csv", sep = ""))
names(nfs.tst.temp)[2] = "lab"
nfs.tst.temp <- nfs.tst.temp %>%
select(subj = Subject.ID,
sleep_time = Total.Sleep.Time..hours., lab) %>%
filter(lab != 0) %>% select(-lab)
if(i == 1){
day.c <- data.frame(day = rep(1:12, times = nrow(nfs.tst.temp %>%
group_by(subj) %>%
count())))
nfs.tst.temp$day <- day.c$day
}
else{
day.c <- data.frame(day = rep(1:15,
times = nrow(nfs.tst.temp %>%
group_by(subj) %>%
count())))
nfs.tst.temp$day <- day.c$day
}
}
else{
nfs.tst.temp <- read.csv(paste(study, ".csv", sep = "")) %>%
select(subj = subID, sleep_time = Total.sleep.time)
nfs.tst.temp <- nfs.tst.temp %>% filter(subj != "")
irreg <- nfs.tst.temp %>% group_by(subj) %>% count() %>%
filter(n < 14) %>% select(subj)
nfs.tst.temp <- nfs.tst.temp %>% filter(!subj %in% irreg$subj)
day.c <- data.frame(day = rep(1:14, times = nrow(nfs.tst.temp %>%
group_by(subj) %>%
count())))
nfs.tst.temp$day <- day.c$day
}
nfs.tst.temp$study = study
nfs.tst <- rbind(nfs.tst, nfs.tst.temp)
}
nfs.tst <- na.omit(nfs.tst)
#remove day 1 from NFS1 and subtract 1 from all days in NFS1
nfs.tst <- nfs.tst %>% filter(ifelse(study == "NFS1", day != 1, day > 0))
nfs.tst <- nfs.tst %>% mutate(day = ifelse(study == "NFS1", day - 1, day))
#fix the timeline in the same way for NFS2
#nfs.tst %>% group_by(subj) %>% filter(study == "NFS2")
nfs.tst <- nfs.tst %>% filter(ifelse(study == "NFS2", day %in% c(3 : 14), day > 0))
#fix the timeline for NFS4 and NFS5
#nfs.tst %>% group_by(subj) %>% filter(study == "NFS4")
nfs.tst <- nfs.tst %>% filter(ifelse(study == "NFS4", day %in% c(2 : 13), day > 0))
#nfs.tst %>% group_by(subj) %>% filter(study == "NFS5")
nfs.tst <- nfs.tst %>% filter(ifelse(study == "NFS5", day %in% c(2 : 13), day > 0))
nfs.tst <- nfs.tst %>% mutate(day = ifelse(study %in% c("NFS4", "NFS5"), day + 1, day))
nfs.tst$sleep_time <- as.numeric(nfs.tst$sleep_time) #convert data to numeric
nfs.tst <- nfs.tst %>% mutate(sleep_time = ifelse(sleep_time > 24, sleep_time/60, sleep_time)) #convert minutes to hours (TST)
#filtering to match participants in both datasets
subj.tst <-  nfs.tst %>% group_by(subj) %>% count() %>% select(subj)
data.nfs <- data.nfs %>% filter(subj %in% subj.tst$subj)
subj.nfs <-  data.nfs %>% group_by(subj) %>% count() %>% select(subj)
nfs.tst <- nfs.tst %>% filter(subj %in% subj.nfs$subj)
#nrow(data.nfs) == nrow(nfs.tst) #check if row count is same
names(nfs.tst)[3] = "day_num" #name day column to match with that on data.nfs dataframe
names(nfs.tst)[2] = "TST" #name sleep_time column to 'TST'
print(head(nfs.tst))
common_names <- intersect(names(data.nfs), names(nfs.tst))
data.safe <- data.nfs
#data.nfs <- data.safe
data.nfs <- merge(data.nfs, nfs.tst, by = common_names, all.x = TRUE)
#data.nfs %>% filter(study == "NFS1")
print(head(data.nfs))
#Create a new column 'TBT' indicating sleep time on the previous night:
#NFS 1, nonap_5hx7 - data starts from day 1
#day 1 is after baseline; 9, 10, 11 are after recovery nights
data.nfs = data.nfs %>%
mutate(TBT = ifelse(group == "nonap_5hx7" & day_num %in% c(1, 9, 10, 11), 9.0, 0.0)) #assign 9h
#NFS 1, control group
data.nfs = data.nfs %>%
mutate(TBT = ifelse(group == "control_9h", 9, TBT))
#Other NFS - data starts from day 3
#day 3 is baseline, 9, 10 are after the intermediate recovery nights
#day 14 is the final recovery night
data.nfs = data.nfs %>%
mutate(TBT = ifelse(group != "nonap_5hx7" & day_num %in% c(3, 9, 10, 14), 9.0, TBT))
data.nfs <- data.nfs %>% mutate(day_num = ifelse(group %in% c("nonap_5hx7", "control_9h"), day_num + 2, day_num))#bring the baseline day to 3 for NFS 1
#initialise condition
data.nfs <- data.nfs %>% mutate(condition = 0)
#rename groups to numeric value denoting sleep condition
data.nfs$condition[data.nfs$group == "nonap_5hx7"] = as.numeric(5)
data.nfs$condition[data.nfs$group == "nonap_5h"] = as.numeric(5)
data.nfs$condition[data.nfs$group == "nonap_6pt5h"] = as.numeric(6.5)
data.nfs$condition[data.nfs$group == "nonap_8h"] = as.numeric(8)
data.nfs$condition[data.nfs$group == "control_9h"] = as.numeric(9)
data.nfs$condition[data.nfs$group == "nap60_5h"] = as.numeric(6)
data.nfs$condition[data.nfs$group == "nap90_5h"] = as.numeric(6.5)
data.nfs$condition[data.nfs$group == "nap90_6pt5h"] = as.numeric(8)
data.nfs = data.nfs %>%
mutate(TBT = ifelse(TBT == 0.0, as.numeric(condition), TBT))#set TBT for other days using sleep conditions
#align the day numbers between the different NFS together
data.nfs = data.nfs %>%
mutate(day_num = day_num - 2)#subtract 2 from all to bring baseline day to 1
print(head(data.nfs))
#Calculate cumulative wake duration
#based on TBT
data.nfs = data.nfs %>% group_by(subj) %>%
mutate(TWT_tbt = cumsum(24 - TBT))
#based on TST
data.nfs = data.nfs %>% group_by(subj) %>%
mutate(TWT_tst = cumsum(24 - TST))
#Filter only days until the first 6 days (1 baseline and 5 manipulation)
data.nfs = data.nfs %>% filter(day_num <= 6)
#data.allconditions <- data.nfs
data.naponly = data.nfs %>% filter(group %in% c("nap60_5h", "nap90_5h", "nap90_6pt5h"))
data.nonap = data.nfs %>% filter(group != "nap60_5h",
group != "nap90_5h",
group != "nap90_6pt5h")
data.nonap <- na.omit(data.nonap)
print(head(data.nfs))
print(head(data.nfs))
# Lapses across groups
day_labels <- c('1' = 'day 1',
'2' = 'day 2',
'3' = 'day 3',
'4' = 'day 4',
'5' = 'day 5',
'6' = 'day 6')
ggplot(data.nonap, aes(x = as.factor(condition), y = lapses)) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) +
# geom_jitter(alpha = 0.1) +
labs(x = "condition", y = "lapses", title = "Lapses vs Sleep condition across 6 days", fill = "Condition") +
#stat_summary(fun = mean, geom = "line", size = 1, alpha = 0.8, aes(group=1, color = as.factor(condition))) +
facet_wrap(~ day_num, labeller = as_labeller(day_labels)) +
guides(color = FALSE) + theme_minimal()
### Scatter plot of lapses across days divided by condition
#lapses vs day
ggplot(data.nonap, aes(x = day_num, y = lapses) ) +
#geom_ribbon() +
geom_jitter(aes(y = lapses, color = factor(condition)), alpha = 0.3) +
labs(x = "day", y = "mean lapses", title = " ", color = "condition") +
facet_wrap(~ as.factor(condition))
#mean lapses vs day
ggplot(data.nonap, aes(x = day_num, y = lapses, color = as.factor(condition))) +
stat_summary(fun = mean, geom = "line", size = 1, alpha = 0.5) +
stat_summary(fun = mean, geom = "point") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", aes(group = as.factor(condition)), width = 0.05) +
labs(x = "day", y = "mean lapses", title = " ", color = "condition") + theme_minimal()
library(nlme)
TBT.nonap.lapses <- nlme(lapses ~ b*(TWT_tbt - crit*day_num)^theta,
data = data.nonap,
fixed = b + theta + crit ~ 1,
random = crit ~ 1,
groups = ~ subj,
start = c(b = 1.4, theta = 0.4, crit = 13),
na.action = na.omit
)
summary(TBT.nonap.lapses)
intervals(TBT.nonap.lapses)
#SLEEP TIME ESTIMATES - no nap
TST.nonap.lapses <- nlme(lapses ~ b*(TWT_tst - crit*day_num)^theta,
data = data.nonap,
fixed = b + theta + crit ~ 1,
random = crit ~ 1,
groups = ~ subj,
start = c(b = 1.4, theta = 0.5, crit = 12),
na.action = na.omit
)
summary(TST.nonap.lapses)
intervals(TST.nonap.lapses)
#extract critical wake duration
crit <- st.nonap.lapses$coefficients$random$subj + st.nonap.lapses$coefficients$fixed[3]
# #lapses predictions
# data.nonap$plapses = predict(sleep.nonap.lapses, data.nonap)
# data.nonap$plapses[is.nan(data.nonap$plapses)] <- 0.0
#
# #graphing lapses vs excess
# crit.lapses <- sleep.nonap.lapses$coefficients$random$subj + sleep.nonap.lapses$coefficients$fixed[3]
# crit.lapses <- data.frame(crit.lapses)
#
# crit.lapses = rep(crit.lapses$crit, each = 6)
# data.nonap = cbind(data.nonap, critical.lapses = crit.lapses)
# data.nonap = data.nonap %>% mutate(excess.lapses = TWT - critical.lapses*day_num)
#
# data.nonap = data.nonap %>% mutate(excess.lapses = ifelse(excess.lapses < 0, 0, excess.lapses))
#
# ggplot(data.nonap, aes(x = excess.lapses, y = lapses)) +
#   stat_summary(fun = mean, geom = "point", aes(group = as.factor(condition), color = as.factor(condition)), alpha = 0.3) +
#  # geom_smooth(color = "black") +
#   stat_summary(fun = mean, geom = "line", aes(y = plapses), size = 1, alpha = 0.5) +
#   #geom_line(aes(y = pred, group = subj)) +
#   labs(x = "excess wakefulness", y = "mean lapses", title = "Mean Lapses vs Excess Wakefulness", color = "condition")
#lapses predictions
data.nonap$plapses = predict(TST.nonap.lapses, data.nonap)
data.nonap$plapses[is.nan(data.nonap$plapses)] <- 0.0
#graphing lapses vs excess
crit.lapses <- TST.nonap.lapses$coefficients$random$subj + TST.nonap.lapses$coefficients$fixed[3]
crit.lapses <- data.frame(crit.lapses)
#crit.lapses %>% filter(crit < 15)
#quantile(crit.lapses$crit, seq(0, 1, 0.10))
# crit.lapses = crit.lapses %>%
#   mutate(z_latency = as.vector(scale(crit)))
# crit.lapses = crit.lapses %>%  filter(z_latency < -2)
crit.names <- data.frame(subj = rownames(crit.lapses))
crit.lapses$subj <- crit.names$subj
subj.irreg <- data.nonap %>% group_by(subj) %>% count() %>% filter(n < 6) %>% select(subj)
data.nonap <- data.nonap %>% filter(!subj %in% c("NFS2073", "NFS4042", "NFS5063"))
crit.lapses <- crit.lapses %>% filter(!subj %in% c("NFS2073", "NFS4042", "NFS5063"))
#filtering to match participants in both datasets
subj.nonap <-  data.nonap %>% group_by(subj) %>% count() %>% select(subj)
crit.lapses <- crit.lapses %>% filter(subj %in% subj.nonap$subj)
subj.crit <-  crit.lapses %>% group_by(subj) %>% count() %>% select(subj)
data.nonap <- data.nonap %>% filter(subj %in% subj.crit$subj)
#
nrow(data.nonap)/6
nrow(crit.lapses)
crit.lapses = rep(crit.lapses$crit, each = 6)
data.nonap = cbind(data.nonap, critical.lapses = crit.lapses)
data.nonap = data.nonap %>% mutate(excess.lapses = TWT_tst - critical.lapses*day_num)
data.nonap = data.nonap %>% mutate(excess.lapses = ifelse(excess.lapses < 0, 0, excess.lapses))
ggplot(data.nonap, aes(x = excess.lapses, y = lapses)) +
stat_summary(fun = mean, geom = "point", aes(group = as.factor(condition), color = as.factor(condition)), alpha = 0.3) +
# geom_smooth(color = "black") +
stat_summary(fun = mean, geom = "point", aes(y = plapses), size = 1, alpha = 0.5) +
#geom_line(aes(y = pred, group = subj)) +
labs(x = "excess wakefulness", y = "mean lapses", title = "Mean Lapses vs Excess Wakefulness", color = "condition")
ggplot(data.nonap, aes(x = excess.lapses, y = lapses)) +
stat_summary(fun = mean, geom = "point", aes(group = as.factor(condition), color = as.factor(condition)), alpha = 0.3) +
# geom_smooth(color = "black") +
stat_summary(fun = mean, geom = "line", aes(y = plapses), size = 1, alpha = 0.5) +
#geom_line(aes(y = pred, group = subj)) +
labs(x = "excess wakefulness", y = "mean lapses", title = "Mean Lapses vs Excess Wakefulness", color = "condition")
knitr::opts_chunk$set(knitr::opts_chunk$set(warning = FALSE, message = FALSE), echo = TRUE)
library(tidyverse)
library(rmarkdown)
#load data
data.nfs = read.csv("nfs.csv")
print(head(data.nfs[, 1:8])) #display dataset
#select only the required groups
data.nfs = data.nfs %>% select(subj, day_num, group, lapses = pvt_lapses)
data.nfs = data.nfs %>% na.omit() #remove NAs
print(head(data.nfs)) #view dataset
#summarize to get mean pvt lapses
data.nfs = data.nfs %>% group_by(subj, group, day_num) %>%
summarise(lapses = mean(lapses))
print(head(data.nfs))
nfs.tst <- data.frame() #create an empty dataframe to initialize
#run a loop to read TST data
for(i in c(1, 2, 4, 5)){
study <- paste("NFS", i, sep = "")
if(i %in% c(1, 2)){
nfs.tst.temp <- read.csv(paste(study, ".csv", sep = ""))
names(nfs.tst.temp)[2] = "lab"
nfs.tst.temp <- nfs.tst.temp %>%
select(subj = Subject.ID,
sleep_time = Total.Sleep.Time..hours., lab) %>%
filter(lab != 0) %>% select(-lab)
if(i == 1){
day.c <- data.frame(day = rep(1:12, times = nrow(nfs.tst.temp %>%
group_by(subj) %>%
count())))
nfs.tst.temp$day <- day.c$day
}
else{
day.c <- data.frame(day = rep(1:15,
times = nrow(nfs.tst.temp %>%
group_by(subj) %>%
count())))
nfs.tst.temp$day <- day.c$day
}
}
else{
nfs.tst.temp <- read.csv(paste(study, ".csv", sep = "")) %>%
select(subj = subID, sleep_time = Total.sleep.time)
nfs.tst.temp <- nfs.tst.temp %>% filter(subj != "")
irreg <- nfs.tst.temp %>% group_by(subj) %>% count() %>%
filter(n < 14) %>% select(subj)
nfs.tst.temp <- nfs.tst.temp %>% filter(!subj %in% irreg$subj)
day.c <- data.frame(day = rep(1:14, times = nrow(nfs.tst.temp %>%
group_by(subj) %>%
count())))
nfs.tst.temp$day <- day.c$day
}
nfs.tst.temp$study = study
nfs.tst <- rbind(nfs.tst, nfs.tst.temp)
}
nfs.tst <- na.omit(nfs.tst)
#remove day 1 from NFS1 and subtract 1 from all days in NFS1
nfs.tst <- nfs.tst %>% filter(ifelse(study == "NFS1", day != 1, day > 0))
nfs.tst <- nfs.tst %>% mutate(day = ifelse(study == "NFS1", day - 1, day))
#fix the timeline in the same way for NFS2
#nfs.tst %>% group_by(subj) %>% filter(study == "NFS2")
nfs.tst <- nfs.tst %>% filter(ifelse(study == "NFS2", day %in% c(3 : 14), day > 0))
#fix the timeline for NFS4 and NFS5
#nfs.tst %>% group_by(subj) %>% filter(study == "NFS4")
nfs.tst <- nfs.tst %>% filter(ifelse(study == "NFS4", day %in% c(2 : 13), day > 0))
#nfs.tst %>% group_by(subj) %>% filter(study == "NFS5")
nfs.tst <- nfs.tst %>% filter(ifelse(study == "NFS5", day %in% c(2 : 13), day > 0))
nfs.tst <- nfs.tst %>% mutate(day = ifelse(study %in% c("NFS4", "NFS5"), day + 1, day))
nfs.tst$sleep_time <- as.numeric(nfs.tst$sleep_time) #convert data to numeric
nfs.tst <- nfs.tst %>% mutate(sleep_time = ifelse(sleep_time > 24, sleep_time/60, sleep_time)) #convert minutes to hours (TST)
#filtering to match participants in both datasets
subj.tst <-  nfs.tst %>% group_by(subj) %>% count() %>% select(subj)
data.nfs <- data.nfs %>% filter(subj %in% subj.tst$subj)
subj.nfs <-  data.nfs %>% group_by(subj) %>% count() %>% select(subj)
nfs.tst <- nfs.tst %>% filter(subj %in% subj.nfs$subj)
#nrow(data.nfs) == nrow(nfs.tst) #check if row count is same
names(nfs.tst)[3] = "day_num" #name day column to match with that on data.nfs dataframe
names(nfs.tst)[2] = "TST" #name sleep_time column to 'TST'
print(head(nfs.tst))
common_names <- intersect(names(data.nfs), names(nfs.tst))
data.safe <- data.nfs
#data.nfs <- data.safe
data.nfs <- merge(data.nfs, nfs.tst, by = common_names, all.x = TRUE)
#data.nfs %>% filter(study == "NFS1")
print(head(data.nfs))
#Create a new column 'TBT' indicating sleep time on the previous night:
#NFS 1, nonap_5hx7 - data starts from day 1
#day 1 is after baseline; 9, 10, 11 are after recovery nights
data.nfs = data.nfs %>%
mutate(TBT = ifelse(group == "nonap_5hx7" & day_num %in% c(1, 9, 10, 11), 9.0, 0.0)) #assign 9h
#NFS 1, control group
data.nfs = data.nfs %>%
mutate(TBT = ifelse(group == "control_9h", 9, TBT))
#Other NFS - data starts from day 3
#day 3 is baseline, 9, 10 are after the intermediate recovery nights
#day 14 is the final recovery night
data.nfs = data.nfs %>%
mutate(TBT = ifelse(group != "nonap_5hx7" & day_num %in% c(3, 9, 10, 14), 9.0, TBT))
data.nfs <- data.nfs %>% mutate(day_num = ifelse(group %in% c("nonap_5hx7", "control_9h"), day_num + 2, day_num))#bring the baseline day to 3 for NFS 1
#initialise condition
data.nfs <- data.nfs %>% mutate(condition = 0)
#rename groups to numeric value denoting sleep condition
data.nfs$condition[data.nfs$group == "nonap_5hx7"] = as.numeric(5)
data.nfs$condition[data.nfs$group == "nonap_5h"] = as.numeric(5)
data.nfs$condition[data.nfs$group == "nonap_6pt5h"] = as.numeric(6.5)
data.nfs$condition[data.nfs$group == "nonap_8h"] = as.numeric(8)
data.nfs$condition[data.nfs$group == "control_9h"] = as.numeric(9)
data.nfs$condition[data.nfs$group == "nap60_5h"] = as.numeric(6)
data.nfs$condition[data.nfs$group == "nap90_5h"] = as.numeric(6.5)
data.nfs$condition[data.nfs$group == "nap90_6pt5h"] = as.numeric(8)
data.nfs = data.nfs %>%
mutate(TBT = ifelse(TBT == 0.0, as.numeric(condition), TBT))#set TBT for other days using sleep conditions
#align the day numbers between the different NFS together
data.nfs = data.nfs %>%
mutate(day_num = day_num - 2)#subtract 2 from all to bring baseline day to 1
print(head(data.nfs))
#Calculate cumulative wake duration
#based on TBT
data.nfs = data.nfs %>% group_by(subj) %>%
mutate(TWT_tbt = cumsum(24 - TBT))
#based on TST
data.nfs = data.nfs %>% group_by(subj) %>%
mutate(TWT_tst = cumsum(24 - TST))
#Filter only days until the first 6 days (1 baseline and 5 manipulation)
data.nfs = data.nfs %>% filter(day_num <= 6)
#data.allconditions <- data.nfs
data.naponly = data.nfs %>% filter(group %in% c("nap60_5h", "nap90_5h", "nap90_6pt5h"))
data.nonap = data.nfs %>% filter(group != "nap60_5h",
group != "nap90_5h",
group != "nap90_6pt5h")
data.nonap <- na.omit(data.nonap)
print(head(data.nfs))
print(head(data.nfs))
# Lapses across groups
day_labels <- c('1' = 'day 1',
'2' = 'day 2',
'3' = 'day 3',
'4' = 'day 4',
'5' = 'day 5',
'6' = 'day 6')
ggplot(data.nonap, aes(x = as.factor(condition), y = lapses)) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) +
# geom_jitter(alpha = 0.1) +
labs(x = "condition", y = "lapses", title = "Lapses vs Sleep condition across 6 days", fill = "Condition") +
#stat_summary(fun = mean, geom = "line", size = 1, alpha = 0.8, aes(group=1, color = as.factor(condition))) +
facet_wrap(~ day_num, labeller = as_labeller(day_labels)) +
guides(color = FALSE) + theme_minimal()
### Scatter plot of lapses across days divided by condition
#lapses vs day
ggplot(data.nonap, aes(x = day_num, y = lapses) ) +
#geom_ribbon() +
geom_jitter(aes(y = lapses, color = factor(condition)), alpha = 0.3) +
labs(x = "day", y = "mean lapses", title = " ", color = "condition") +
facet_wrap(~ as.factor(condition))
#mean lapses vs day
ggplot(data.nonap, aes(x = day_num, y = lapses, color = as.factor(condition))) +
stat_summary(fun = mean, geom = "line", size = 1, alpha = 0.5) +
stat_summary(fun = mean, geom = "point") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", aes(group = as.factor(condition)), width = 0.05) +
labs(x = "day", y = "mean lapses", title = " ", color = "condition") + theme_minimal()
library(nlme)
TBT.nonap.lapses <- nlme(lapses ~ b*(TWT_tbt - crit*day_num)^theta,
data = data.nonap,
fixed = b + theta + crit ~ 1,
random = crit ~ 1,
groups = ~ subj,
start = c(b = 1.4, theta = 0.4, crit = 13),
na.action = na.omit
)
summary(TBT.nonap.lapses)
intervals(TBT.nonap.lapses)
#SLEEP TIME ESTIMATES - no nap
TST.nonap.lapses <- nlme(lapses ~ b*(TWT_tst - crit*day_num)^theta,
data = data.nonap,
fixed = b + theta + crit ~ 1,
random = crit ~ 1,
groups = ~ subj,
start = c(b = 1.4, theta = 0.5, crit = 12),
na.action = na.omit
)
summary(TST.nonap.lapses)
intervals(TST.nonap.lapses)
#extract critical wake duration
crit <- TST.nonap.lapses$coefficients$random$subj + TST.nonap.lapses$coefficients$fixed[3]
crit <- data.frame(crit)
crit$id <- 1:nrow(crit)
ggplot(crit, aes(x = crit, y = id)) +
geom_point(alpha = 0.5, color = "darkgreen") +
geom_vline(xintercept = st.nonap.lapses$coefficients$fixed[3], color = "navyblue", linetype = 2, size = 0.7) +
labs(x = "critical waking duration", y = "id")
# #lapses predictions
# data.nonap$plapses = predict(sleep.nonap.lapses, data.nonap)
# data.nonap$plapses[is.nan(data.nonap$plapses)] <- 0.0
#
# #graphing lapses vs excess
# crit.lapses <- sleep.nonap.lapses$coefficients$random$subj + sleep.nonap.lapses$coefficients$fixed[3]
# crit.lapses <- data.frame(crit.lapses)
#
# crit.lapses = rep(crit.lapses$crit, each = 6)
# data.nonap = cbind(data.nonap, critical.lapses = crit.lapses)
# data.nonap = data.nonap %>% mutate(excess.lapses = TWT - critical.lapses*day_num)
#
# data.nonap = data.nonap %>% mutate(excess.lapses = ifelse(excess.lapses < 0, 0, excess.lapses))
#
# ggplot(data.nonap, aes(x = excess.lapses, y = lapses)) +
#   stat_summary(fun = mean, geom = "point", aes(group = as.factor(condition), color = as.factor(condition)), alpha = 0.3) +
#  # geom_smooth(color = "black") +
#   stat_summary(fun = mean, geom = "line", aes(y = plapses), size = 1, alpha = 0.5) +
#   #geom_line(aes(y = pred, group = subj)) +
#   labs(x = "excess wakefulness", y = "mean lapses", title = "Mean Lapses vs Excess Wakefulness", color = "condition")
#lapses predictions
data.nonap$plapses = predict(TST.nonap.lapses, data.nonap)
data.nonap$plapses[is.nan(data.nonap$plapses)] <- 0.0
#graphing lapses vs excess
crit.lapses <- TST.nonap.lapses$coefficients$random$subj + TST.nonap.lapses$coefficients$fixed[3]
crit.lapses <- data.frame(crit.lapses)
#crit.lapses %>% filter(crit < 15)
#quantile(crit.lapses$crit, seq(0, 1, 0.10))
# crit.lapses = crit.lapses %>%
#   mutate(z_latency = as.vector(scale(crit)))
# crit.lapses = crit.lapses %>%  filter(z_latency < -2)
crit.names <- data.frame(subj = rownames(crit.lapses))
crit.lapses$subj <- crit.names$subj
subj.irreg <- data.nonap %>% group_by(subj) %>% count() %>% filter(n < 6) %>% select(subj)
data.nonap <- data.nonap %>% filter(!subj %in% c("NFS2073", "NFS4042", "NFS5063"))
crit.lapses <- crit.lapses %>% filter(!subj %in% c("NFS2073", "NFS4042", "NFS5063"))
#filtering to match participants in both datasets
subj.nonap <-  data.nonap %>% group_by(subj) %>% count() %>% select(subj)
crit.lapses <- crit.lapses %>% filter(subj %in% subj.nonap$subj)
subj.crit <-  crit.lapses %>% group_by(subj) %>% count() %>% select(subj)
data.nonap <- data.nonap %>% filter(subj %in% subj.crit$subj)
#
nrow(data.nonap)/6
nrow(crit.lapses)
crit.lapses = rep(crit.lapses$crit, each = 6)
data.nonap = cbind(data.nonap, critical.lapses = crit.lapses)
data.nonap = data.nonap %>% mutate(excess.lapses = TWT_tst - critical.lapses*day_num)
data.nonap = data.nonap %>% mutate(excess.lapses = ifelse(excess.lapses < 0, 0, excess.lapses))
ggplot(data.nonap, aes(x = excess.lapses, y = lapses)) +
stat_summary(fun = mean, geom = "point", aes(group = as.factor(condition), color = as.factor(condition)), alpha = 0.3) +
# geom_smooth(color = "black") +
stat_summary(fun = mean, geom = "line", aes(y = plapses), size = 1, alpha = 0.5) +
#geom_line(aes(y = pred, group = subj)) +
labs(x = "excess wakefulness", y = "mean lapses", title = "Mean Lapses vs Excess Wakefulness", color = "condition")
ggplot(data.nonap, aes(x = day_num, y = excess.lapses, color = as.factor(condition))) +
stat_summary(fun = mean, geom = "line", size = 1, alpha = 0.5) +
stat_summary(fun = mean, geom = "point") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", aes(group = as.factor(condition)), width = 0.05) +
labs(x = "day", y = "mean lapses", title = " ", color = "condition") + theme_minimal()
